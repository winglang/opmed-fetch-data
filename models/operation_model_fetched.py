# coding: utf-8

"""
    GreatMix Planner API

    The API for the Planner  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401



from models import TimeModel


class OperationModelFetched(TimeModel):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parent_block_id': 'int',
        'surgery_id': 'int',
        'doc_name': 'str',
        'sur_name': 'str',
        'type': 'str',
        'procedure': 'DefinitionsProcedureModel',
        'monitoring_request': 'str',
        'xray_type': 'str',
        'xray_type_value': 'str',
        'tee_request': 'str',
        'heart_lung_machine_request': 'str',
        'additional_equipment': 'DefinitionsAdditionalResourceModel',
        'setup_time': 'int'
    }

    attribute_map = {
        'parent_block_id': 'parent_block_id',
        'surgery_id': 'surgery_id',
        'doc_name': 'doc_name',
        'sur_name': 'sur_name',
        'type': 'type',
        'procedure': 'procedure',
        'monitoring_request': 'monitoring_request',
        'xray_type': 'xray_type',
        'xray_type_value': 'xray_type_value',
        'tee_request': 'tee_request',
        'heart_lung_machine_request': 'heart_lung_machine_request',
        'additional_equipment': 'additionalEquipment',
        'setup_time': 'setup_time'
    }

    def __init__(self, id, start, end, room_id, parent_block_id, surgery_id, resourceId=None, doc_name=None, sur_name=None, procedure=None,
                 monitoring_request=None, xray_type=None, xray_type_value=None, tee_request=None,
                 heart_lung_machine_request=None, additional_equipment=None, setup_time=None):  # noqa: E501
        super().__init__(id, start, end, resourceId, room_id)
        """OperationModelFetched - a model defined in Swagger"""  # noqa: E501
        self._parent_block_id = None
        self._surgery_id = None
        self._doc_name = None
        self._sur_name = None
        self._type = None
        self._procedure = None
        self._monitoring_request = None
        self._xray_type = None
        self._xray_type_value = None
        self._tee_request = None
        self._heart_lung_machine_request = None
        self._additional_equipment = None
        self._setup_time = None
        self.discriminator = None
        if parent_block_id is not None:
            self.parent_block_id = parent_block_id
        if surgery_id is not None:
            self.surgery_id = surgery_id
        if doc_name is not None:
            self.doc_name = doc_name
        if sur_name is not None:
            self.sur_name = sur_name
        if type is not None:
            self.type = type
        if procedure is not None:
            self.procedure = procedure
        if monitoring_request is not None:
            self.monitoring_request = monitoring_request
        if xray_type is not None:
            self.xray_type = xray_type
        if xray_type_value is not None:
            self.xray_type_value = xray_type_value
        if tee_request is not None:
            self.tee_request = tee_request
        if heart_lung_machine_request is not None:
            self.heart_lung_machine_request = heart_lung_machine_request
        if additional_equipment is not None:
            self.additional_equipment = additional_equipment
        if setup_time is not None:
            self.setup_time = setup_time

    @property
    def parent_block_id(self):
        """Gets the parent_block_id of this OperationModelFetched.  # noqa: E501


        :return: The parent_block_id of this OperationModelFetched.  # noqa: E501
        :rtype: int
        """
        return self._parent_block_id

    @parent_block_id.setter
    def parent_block_id(self, parent_block_id):
        """Sets the parent_block_id of this OperationModelFetched.


        :param parent_block_id: The parent_block_id of this OperationModelFetched.  # noqa: E501
        :type: int
        """

        self._parent_block_id = parent_block_id

    @property
    def surgery_id(self):
        """Gets the surgery_id of this OperationModelFetched.  # noqa: E501


        :return: The surgery_id of this OperationModelFetched.  # noqa: E501
        :rtype: int
        """
        return self._surgery_id

    @surgery_id.setter
    def surgery_id(self, surgery_id):
        """Sets the surgery_id of this OperationModelFetched.


        :param surgery_id: The surgery_id of this OperationModelFetched.  # noqa: E501
        :type: int
        """

        self._surgery_id = surgery_id

    @property
    def doc_name(self):
        """Gets the doc_name of this OperationModelFetched.  # noqa: E501


        :return: The doc_name of this OperationModelFetched.  # noqa: E501
        :rtype: str
        """
        return self._doc_name

    @doc_name.setter
    def doc_name(self, doc_name):
        """Sets the doc_name of this OperationModelFetched.


        :param doc_name: The doc_name of this OperationModelFetched.  # noqa: E501
        :type: str
        """

        self._doc_name = doc_name

    @property
    def sur_name(self):
        """Gets the sur_name of this OperationModelFetched.  # noqa: E501


        :return: The sur_name of this OperationModelFetched.  # noqa: E501
        :rtype: str
        """
        return self._sur_name

    @sur_name.setter
    def sur_name(self, sur_name):
        """Sets the sur_name of this OperationModelFetched.


        :param sur_name: The sur_name of this OperationModelFetched.  # noqa: E501
        :type: str
        """

        self._sur_name = sur_name

    @property
    def type(self):
        """Gets the type of this OperationModelFetched.  # noqa: E501


        :return: The type of this OperationModelFetched.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OperationModelFetched.


        :param type: The type of this OperationModelFetched.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def procedure(self):
        """Gets the procedure of this OperationModelFetched.  # noqa: E501


        :return: The procedure of this OperationModelFetched.  # noqa: E501
        :rtype: DefinitionsProcedureModel
        """
        return self._procedure

    @procedure.setter
    def procedure(self, procedure):
        """Sets the procedure of this OperationModelFetched.


        :param procedure: The procedure of this OperationModelFetched.  # noqa: E501
        :type: DefinitionsProcedureModel
        """

        self._procedure = procedure

    @property
    def monitoring_request(self):
        """Gets the monitoring_request of this OperationModelFetched.  # noqa: E501


        :return: The monitoring_request of this OperationModelFetched.  # noqa: E501
        :rtype: str
        """
        return self._monitoring_request

    @monitoring_request.setter
    def monitoring_request(self, monitoring_request):
        """Sets the monitoring_request of this OperationModelFetched.


        :param monitoring_request: The monitoring_request of this OperationModelFetched.  # noqa: E501
        :type: str
        """

        self._monitoring_request = monitoring_request

    @property
    def xray_type(self):
        """Gets the xray_type of this OperationModelFetched.  # noqa: E501


        :return: The xray_type of this OperationModelFetched.  # noqa: E501
        :rtype: str
        """
        return self._xray_type

    @xray_type.setter
    def xray_type(self, xray_type):
        """Sets the xray_type of this OperationModelFetched.


        :param xray_type: The xray_type of this OperationModelFetched.  # noqa: E501
        :type: str
        """

        self._xray_type = xray_type

    @property
    def xray_type_value(self):
        """Gets the xray_type_value of this OperationModelFetched.  # noqa: E501


        :return: The xray_type_value of this OperationModelFetched.  # noqa: E501
        :rtype: str
        """
        return self._xray_type_value

    @xray_type_value.setter
    def xray_type_value(self, xray_type_value):
        """Sets the xray_type_value of this OperationModelFetched.


        :param xray_type_value: The xray_type_value of this OperationModelFetched.  # noqa: E501
        :type: str
        """

        self._xray_type_value = xray_type_value

    @property
    def tee_request(self):
        """Gets the tee_request of this OperationModelFetched.  # noqa: E501


        :return: The tee_request of this OperationModelFetched.  # noqa: E501
        :rtype: str
        """
        return self._tee_request

    @tee_request.setter
    def tee_request(self, tee_request):
        """Sets the tee_request of this OperationModelFetched.


        :param tee_request: The tee_request of this OperationModelFetched.  # noqa: E501
        :type: str
        """

        self._tee_request = tee_request

    @property
    def heart_lung_machine_request(self):
        """Gets the heart_lung_machine_request of this OperationModelFetched.  # noqa: E501


        :return: The heart_lung_machine_request of this OperationModelFetched.  # noqa: E501
        :rtype: str
        """
        return self._heart_lung_machine_request

    @heart_lung_machine_request.setter
    def heart_lung_machine_request(self, heart_lung_machine_request):
        """Sets the heart_lung_machine_request of this OperationModelFetched.


        :param heart_lung_machine_request: The heart_lung_machine_request of this OperationModelFetched.  # noqa: E501
        :type: str
        """

        self._heart_lung_machine_request = heart_lung_machine_request

    @property
    def additional_equipment(self):
        """Gets the additional_equipment of this OperationModelFetched.  # noqa: E501


        :return: The additional_equipment of this OperationModelFetched.  # noqa: E501
        :rtype: DefinitionsAdditionalResourceModel
        """
        return self._additional_equipment

    @additional_equipment.setter
    def additional_equipment(self, additional_equipment):
        """Sets the additional_equipment of this OperationModelFetched.


        :param additional_equipment: The additional_equipment of this OperationModelFetched.  # noqa: E501
        :type: DefinitionsAdditionalResourceModel
        """

        self._additional_equipment = additional_equipment

    @property
    def setup_time(self):
        """Gets the setup_time of this OperationModelFetched.  # noqa: E501


        :return: The setup_time of this OperationModelFetched.  # noqa: E501
        :rtype: int
        """
        return self._setup_time

    @setup_time.setter
    def setup_time(self, setup_time):
        """Sets the setup_time of this OperationModelFetched.


        :param setup_time: The setup_time of this OperationModelFetched.  # noqa: E501
        :type: int
        """

        self._setup_time = setup_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OperationModelFetched, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OperationModelFetched):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
