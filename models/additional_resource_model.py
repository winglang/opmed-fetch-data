# coding: utf-8

"""
    GreatMix Planner API

    The API for the Planner  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401



class AdditionalResourceModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'monitor': 'bool',
        'x_ray': 'bool',
        'hospital_stretchers': 'bool',
        'defibrillators': 'bool',
        'anesthesia_machines': 'bool',
        'patient_monitors': 'bool',
        'sterilizers': 'bool',
        'ekg_machines': 'bool',
        'surgical_tables': 'bool',
        'blanket_and_fluid_warmers': 'bool',
        'tee': 'bool'
    }

    attribute_map = {
        'monitor': 'monitor',
        'x_ray': 'x_ray',
        'hospital_stretchers': 'hospital_stretchers',
        'defibrillators': 'defibrillators',
        'anesthesia_machines': 'anesthesia_machines',
        'patient_monitors': 'patient_monitors',
        'sterilizers': 'sterilizers',
        'ekg_machines': 'ekg_machines',
        'surgical_tables': 'surgical_tables',
        'blanket_and_fluid_warmers': 'blanket_and_fluid_warmers',
        'tee': 'tee'
    }

    def __init__(self, monitor=None, x_ray=None, hospital_stretchers=None, defibrillators=None, anesthesia_machines=None, patient_monitors=None, sterilizers=None, ekg_machines=None, surgical_tables=None, blanket_and_fluid_warmers=None, tee=None):  # noqa: E501
        """AdditionalResourceModel - a model defined in Swagger"""  # noqa: E501
        self._monitor = None
        self._x_ray = None
        self._hospital_stretchers = None
        self._defibrillators = None
        self._anesthesia_machines = None
        self._patient_monitors = None
        self._sterilizers = None
        self._ekg_machines = None
        self._surgical_tables = None
        self._blanket_and_fluid_warmers = None
        self._tee = None
        self.discriminator = None
        if monitor is not None:
            self.monitor = monitor
        if x_ray is not None:
            self.x_ray = x_ray
        if hospital_stretchers is not None:
            self.hospital_stretchers = hospital_stretchers
        if defibrillators is not None:
            self.defibrillators = defibrillators
        if anesthesia_machines is not None:
            self.anesthesia_machines = anesthesia_machines
        if patient_monitors is not None:
            self.patient_monitors = patient_monitors
        if sterilizers is not None:
            self.sterilizers = sterilizers
        if ekg_machines is not None:
            self.ekg_machines = ekg_machines
        if surgical_tables is not None:
            self.surgical_tables = surgical_tables
        if blanket_and_fluid_warmers is not None:
            self.blanket_and_fluid_warmers = blanket_and_fluid_warmers
        if tee is not None:
            self.tee = tee

    @property
    def monitor(self):
        """Gets the monitor of this AdditionalResourceModel.  # noqa: E501


        :return: The monitor of this AdditionalResourceModel.  # noqa: E501
        :rtype: bool
        """
        return self._monitor

    @monitor.setter
    def monitor(self, monitor):
        """Sets the monitor of this AdditionalResourceModel.


        :param monitor: The monitor of this AdditionalResourceModel.  # noqa: E501
        :type: bool
        """

        self._monitor = monitor

    @property
    def x_ray(self):
        """Gets the x_ray of this AdditionalResourceModel.  # noqa: E501


        :return: The x_ray of this AdditionalResourceModel.  # noqa: E501
        :rtype: bool
        """
        return self._x_ray

    @x_ray.setter
    def x_ray(self, x_ray):
        """Sets the x_ray of this AdditionalResourceModel.


        :param x_ray: The x_ray of this AdditionalResourceModel.  # noqa: E501
        :type: bool
        """

        self._x_ray = x_ray

    @property
    def hospital_stretchers(self):
        """Gets the hospital_stretchers of this AdditionalResourceModel.  # noqa: E501


        :return: The hospital_stretchers of this AdditionalResourceModel.  # noqa: E501
        :rtype: bool
        """
        return self._hospital_stretchers

    @hospital_stretchers.setter
    def hospital_stretchers(self, hospital_stretchers):
        """Sets the hospital_stretchers of this AdditionalResourceModel.


        :param hospital_stretchers: The hospital_stretchers of this AdditionalResourceModel.  # noqa: E501
        :type: bool
        """

        self._hospital_stretchers = hospital_stretchers

    @property
    def defibrillators(self):
        """Gets the defibrillators of this AdditionalResourceModel.  # noqa: E501


        :return: The defibrillators of this AdditionalResourceModel.  # noqa: E501
        :rtype: bool
        """
        return self._defibrillators

    @defibrillators.setter
    def defibrillators(self, defibrillators):
        """Sets the defibrillators of this AdditionalResourceModel.


        :param defibrillators: The defibrillators of this AdditionalResourceModel.  # noqa: E501
        :type: bool
        """

        self._defibrillators = defibrillators

    @property
    def anesthesia_machines(self):
        """Gets the anesthesia_machines of this AdditionalResourceModel.  # noqa: E501


        :return: The anesthesia_machines of this AdditionalResourceModel.  # noqa: E501
        :rtype: bool
        """
        return self._anesthesia_machines

    @anesthesia_machines.setter
    def anesthesia_machines(self, anesthesia_machines):
        """Sets the anesthesia_machines of this AdditionalResourceModel.


        :param anesthesia_machines: The anesthesia_machines of this AdditionalResourceModel.  # noqa: E501
        :type: bool
        """

        self._anesthesia_machines = anesthesia_machines

    @property
    def patient_monitors(self):
        """Gets the patient_monitors of this AdditionalResourceModel.  # noqa: E501


        :return: The patient_monitors of this AdditionalResourceModel.  # noqa: E501
        :rtype: bool
        """
        return self._patient_monitors

    @patient_monitors.setter
    def patient_monitors(self, patient_monitors):
        """Sets the patient_monitors of this AdditionalResourceModel.


        :param patient_monitors: The patient_monitors of this AdditionalResourceModel.  # noqa: E501
        :type: bool
        """

        self._patient_monitors = patient_monitors

    @property
    def sterilizers(self):
        """Gets the sterilizers of this AdditionalResourceModel.  # noqa: E501


        :return: The sterilizers of this AdditionalResourceModel.  # noqa: E501
        :rtype: bool
        """
        return self._sterilizers

    @sterilizers.setter
    def sterilizers(self, sterilizers):
        """Sets the sterilizers of this AdditionalResourceModel.


        :param sterilizers: The sterilizers of this AdditionalResourceModel.  # noqa: E501
        :type: bool
        """

        self._sterilizers = sterilizers

    @property
    def ekg_machines(self):
        """Gets the ekg_machines of this AdditionalResourceModel.  # noqa: E501


        :return: The ekg_machines of this AdditionalResourceModel.  # noqa: E501
        :rtype: bool
        """
        return self._ekg_machines

    @ekg_machines.setter
    def ekg_machines(self, ekg_machines):
        """Sets the ekg_machines of this AdditionalResourceModel.


        :param ekg_machines: The ekg_machines of this AdditionalResourceModel.  # noqa: E501
        :type: bool
        """

        self._ekg_machines = ekg_machines

    @property
    def surgical_tables(self):
        """Gets the surgical_tables of this AdditionalResourceModel.  # noqa: E501


        :return: The surgical_tables of this AdditionalResourceModel.  # noqa: E501
        :rtype: bool
        """
        return self._surgical_tables

    @surgical_tables.setter
    def surgical_tables(self, surgical_tables):
        """Sets the surgical_tables of this AdditionalResourceModel.


        :param surgical_tables: The surgical_tables of this AdditionalResourceModel.  # noqa: E501
        :type: bool
        """

        self._surgical_tables = surgical_tables

    @property
    def blanket_and_fluid_warmers(self):
        """Gets the blanket_and_fluid_warmers of this AdditionalResourceModel.  # noqa: E501


        :return: The blanket_and_fluid_warmers of this AdditionalResourceModel.  # noqa: E501
        :rtype: bool
        """
        return self._blanket_and_fluid_warmers

    @blanket_and_fluid_warmers.setter
    def blanket_and_fluid_warmers(self, blanket_and_fluid_warmers):
        """Sets the blanket_and_fluid_warmers of this AdditionalResourceModel.


        :param blanket_and_fluid_warmers: The blanket_and_fluid_warmers of this AdditionalResourceModel.  # noqa: E501
        :type: bool
        """

        self._blanket_and_fluid_warmers = blanket_and_fluid_warmers

    @property
    def tee(self):
        """Gets the tee of this AdditionalResourceModel.  # noqa: E501


        :return: The tee of this AdditionalResourceModel.  # noqa: E501
        :rtype: bool
        """
        return self._tee

    @tee.setter
    def tee(self, tee):
        """Sets the tee of this AdditionalResourceModel.


        :param tee: The tee of this AdditionalResourceModel.  # noqa: E501
        :type: bool
        """

        self._tee = tee

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdditionalResourceModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdditionalResourceModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
